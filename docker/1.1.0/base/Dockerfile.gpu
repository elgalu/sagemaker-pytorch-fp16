ARG CUDA_BASE_VER="10.1"
ARG LINUX_VERSION="ubuntu16.04"

# 10.1: cudnn 7.5.0 - CUDA 10.1.105 (nvidia/cuda:10.1-cudnn7-devel-ubuntu16.04)
FROM nvidia/cuda:${CUDA_BASE_VER}-cudnn7-devel-${LINUX_VERSION}

# cudnn 7.5.0 - CUDA 9.2.148
# FROM nvidia/cuda:9.2-cudnn7-devel-ubuntu16.04

# Not using nvcr.io as it's a private registry and requires auth
# cudnn 7.5.0 - CUDA 10.1.105
# torch 1.1.0a0+9eb0f43
# FROM nvcr.io/nvidia/pytorch:19.04-py3

# Ensure ARGs before `FROM` stay:
ARG CUDA_BASE_VER
ARG LINUX_VERSION

ENV LIBCUDNN7_VER="7.5.1.10-1" \
    LINUX_VERSION_UNDOTTED="ubuntu1604" \
    LINUX_GENERIC_PLATFORM="x86_64" \
    LINUX_AMD_PLATFORM="amd64" \
    CMAKE_VER="3.14.3"

RUN nvcc --version \
  && cat /usr/include/x86_64-linux-gnu/cudnn_v*.h | grep CUDNN_MAJOR -A 2 \
  && cat /usr/local/cuda/version.txt

# No interactive frontend during docker build
ENV DEBIAN_FRONTEND=noninteractive \
    DEBCONF_NONINTERACTIVE_SEEN=true

# Locale and encoding settings
ENV LANG_WHICH=en \
    LANG_WHERE=US \
    ENCODING=UTF-8
ENV LANGUAGE ${LANG_WHICH}_${LANG_WHERE}.${ENCODING}
ENV LANG="${LANGUAGE}" \
    LC_ALL="${LANGUAGE}"

# Python won’t try to write .pyc or .pyo files on the import of source modules
# Force stdin, stdout and stderr to be totally unbuffered. Good for logging
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONIOENCODING="${ENCODING}"

RUN apt -qqy update \
  && apt -qqy --no-install-recommends install \
    language-pack-en \
    tzdata \
    locales \
  && locale-gen ${LANGUAGE} \
  && dpkg-reconfigure --frontend noninteractive locales \
  && apt -qyy autoremove \
  && apt -qyy clean

# Timezone settings
ENV TZ="Europe/Berlin"
RUN echo "Setting time zone to '${TZ}'" \
  && echo "${TZ}" > /etc/timezone \
  && dpkg-reconfigure --frontend noninteractive tzdata

# wget is required to proceed
RUN cd /tmp \
 && apt-get update \
 && apt-get install -y --no-install-recommends \
        'wget'

# https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/
RUN cd /tmp \
 && _nvidia_url="https://developer.download.nvidia.com/compute/machine-learning/repos" \
 && _runtime="libcudnn7_${LIBCUDNN7_VER}+cuda${CUDA_BASE_VER}_${LINUX_AMD_PLATFORM}.deb" \
 && _develop="libcudnn7-dev_${LIBCUDNN7_VER}+cuda${CUDA_BASE_VER}_${LINUX_AMD_PLATFORM}.deb" \
 && wget -nv "${_nvidia_url}/${LINUX_VERSION_UNDOTTED}/${LINUX_GENERIC_PLATFORM}/${_runtime}" \
 && wget -nv "${_nvidia_url}/${LINUX_VERSION_UNDOTTED}/${LINUX_GENERIC_PLATFORM}/${_develop}" \
 && dpkg -i "/tmp/${_runtime}" \
 && dpkg -i "/tmp/${_develop}" \
 && rm /tmp/*.deb \
 && nvcc --version \
 && cat /usr/include/${LINUX_GENERIC_PLATFORM}-linux-gnu/cudnn_v*.h | grep CUDNN_MAJOR -A 2 \
 && cat /usr/local/cuda/version.txt \
 && echo "Done with libcudnn7 (${LIBCUDNN7_VER}) over (7.5.0.56-1)"

ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/cuda/lib:/usr/local/lib" \
    CPLUS_INCLUDE_PATH="/usr/local/cuda/include"

# Install python and nginx
# Compile PyTorch from sources. Compiling notes:
#   Found CUDA with FP16 support, compiling with torch.cuda.HalfTensor
#     good
#   Found a library with BLAS API (generic).
#     generic means it wasn't compiled for a specific CPU
#   Found a library with LAPACK API (generic)
#     generic means it wasn't compiled for a specific CPU
#   MIOpen not found. Compiling without MIOpen support
#     MIOpen is AMD’s library for high performance ML primitives
#   ROCm enabled platform
RUN cd /tmp \
 && apt-get update && apt-get install -y --no-install-recommends software-properties-common \
 && add-apt-repository ppa:deadsnakes/ppa -y \
 && apt-get update && apt-get install -y --no-install-recommends \
        'build-essential' \
        'apt-transport-https' \
        'gnupg' \
        'lsb-release' \
        'curl' \
        'wget' \
        'unzip' \
        'jq' \
        'libsm6' \
        'libxext6' \
        'libxrender-dev' \
        'nginx' \
        'git' \
        'cmake' \
        'libreadline-dev' \
        'libblas-dev' \
        'liblapack-dev' \
  # Remove cmake then upgrade it
  && apt -qyy remove \
        'cmake' \
  && apt -qqy autoremove \
  # Upgrade CMake
  && cd /tmp \
  && wget -nv "https://github.com/Kitware/CMake/releases/download/v${CMAKE_VER}/cmake-${CMAKE_VER}.tar.gz" \
  && tar -zxf "cmake-${CMAKE_VER}.tar.gz" \
  && cd "cmake-${CMAKE_VER}" \
  && ./configure \
  && make \
  && make install \
  && cd /tmp \
  && rm -rf /tmp/cmake* \
  && cmake --version \
  && cmake --version 2>&1 | grep "${CMAKE_VER}" \
  # Install FindCUDA via Lua
  # && cd /tmp \
  # && curl -R -O "http://www.lua.org/ftp/lua-5.3.5.tar.gz" \
  # && tar -zxf lua-5.3.5.tar.gz \
  # && cd lua-5.3.5 \
  # && make linux test \
  # && make install \
  # && cd /tmp \
  # && rm -rf /tmp/lua* \
  # && cd /tmp \
  # && wget "https://luarocks.org/releases/luarocks-3.1.2.tar.gz" \
  # && tar zxpf luarocks-3.1.2.tar.gz \
  # && cd luarocks-3.1.2 \
  # && ./configure \
  # && make build \
  # && make install \
  # && cd /tmp \
  # && rm -rf /tmp/lua* \
  # Compile newer OpenBlas from source
  && cd /tmp \
  && _blas_commit="9208ab86036554d50fbf175a078603eab20fb42e" \
  && git clone "https://github.com/xianyi/OpenBLAS" \
  && cd OpenBLAS \
  && git checkout "${_blas_commit}" -b local_build \
  && git submodule update --init --recursive \
  && make NO_AFFINITY=1 USE_OPENMP=1 \
  && make install \
  && cd /tmp \
  && rm -rf /tmp/Open* \
  # Remove redundant packages
  && apt -qyy remove \
        'python3.5' \
        'python3.5-minimal' \
        'libpython3.5-minimal' \
        'libpython3.5-stdlib' \
  && apt -qyy install --no-install-recommends \
        'python3.7-dev' \
  && apt -qqy autoremove \
  && ln -s -f /usr/bin/python3.7 /usr/bin/python \
  && python --version \
  && python --version 2>&1 | grep "3\.7\.3" \
  && nvcc --version \
  && curl -O "https://bootstrap.pypa.io/get-pip.py" \
  && python get-pip.py 'pip<=18.1' \
  && rm get-pip.py \
  && ln -s -f /usr/local/bin/pip /usr/bin/pip \
  && ls -lah --color='always' /usr/bin/pip* \
  && pip --version \
  && pip --version 2>&1 | grep "python 3\.7" \
  && pip install --no-cache-dir \
        'torch==1.1.0' \
        'torchvision==0.2.2' \
        'Pillow==6.0.0' \
        'retrying==1.3.3' \
        'six==1.12.0' \
        'fastai==1.0.52' \
        'opencv-python>=4.0,<4.1' \
  && pip install --no-cache-dir \
        'pyarrow==0.13.0' \
  && python -c 'import torch' \
  && python -c 'import pyarrow' \
  # Upgrade PyTorch and compile with current CUDA version
  && cd /tmp \
  && _pytorch_commit="101176870ecea86f48ae1df4f2d919833e890854" \
  && git clone "https://github.com/pytorch/pytorch" \
  && cd pytorch \
  && git checkout "${_pytorch_commit}" -b local_build \
  && git submodule update --init --recursive \
  && python setup.py install \
  && cd /tmp \
  && rm -rf /tmp/py* \
  && python -c 'import torch' \
  && python -c 'import pyarrow'

RUN cd /tmp \
  # Apex is NVIDIA-maintained utilities to streamline
  # mixed precision and distributed training in Pytorch
  # https://github.com/nvidia/apex
  && cd /tmp \
  && python --version \
  && python --version 2>&1 | grep "3\.7\.3" \
  && pip --version \
  && pip --version 2>&1 | grep "python 3\.7" \
  && nvcc --version \
  && _apex_commit="f2b3a62c8941027253b2decba96ba099f611387e" \
  && curl -L -O "https://github.com/NVIDIA/apex/archive/${_apex_commit}.zip" \
  && unzip -x "${_apex_commit}.zip" \
  && cd "apex-${_apex_commit}" \
  && pip install --no-cache-dir \
        --global-option="--cpp_ext" \
        --global-option="--cuda_ext" . \
  && cd /tmp \
  && rm -rf apex* *.zip \
  && apt -qqy autoremove \
  && echo "Apex: Check that everything is still there" \
  && python --version \
  && python --version 2>&1 | grep "3\.7\.3" \
  && pip --version \
  && pip --version 2>&1 | grep "python 3\.7" \
  && nvcc --version \
  && python -c 'import torch' \
  && python -c 'import pyarrow' \
  && python -c 'import apex' \
  && echo "Done with Apex"

# Using "Ubuntu 16.04 LTS" as showed at:
# https://github.com/apache/arrow/blob/master/site/install.md
# RUN cd /tmp \
#   && touch /etc/apt/sources.list.d/apache-arrow.list \
#   && echo "deb [arch=amd64] https://dl.bintray.com/apache/arrow/ubuntu/ xenial main" \
#         >> /etc/apt/sources.list.d/apache-arrow.list \
#   && echo "deb-src https://dl.bintray.com/apache/arrow/ubuntu/ xenial main" \
#         >> /etc/apt/sources.list.d/apache-arrow.list \
#   && curl "https://dist.apache.org/repos/dist/dev/arrow/KEYS" | apt-key add - \
#   && curl "https://apt.llvm.org/llvm-snapshot.gpg.key" | apt-key add - \
#   && touch /etc/apt/sources.list.d/llvm.list \
#   && echo "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-7 main" \
#         >> /etc/apt/sources.list.d/llvm.list \
#   && echo "deb-src http://apt.llvm.org/xenial/ llvm-toolchain-xenial-7 main" \
#         >> /etc/apt/sources.list.d/llvm.list \
#   && apt -qqy update \
#   && apt -qqy --no-install-recommends install \
#         'libarrow-dev' \
#         'libarrow-glib-dev' \
#         'libparquet-dev' \
#         'libparquet-glib-dev' \
#   && apt -qyy remove \
#         'python2.7' \
#         'python2.7-minimal' \
#         'libpython2.7-minimal' \
#         'libpython2.7-stdlib' \
#   && pip install --no-cache-dir \
#         'pyarrow==0.13.0' \
#   && python -c 'import pyarrow' \
#   && python -c 'import torch' \
#   && echo "Done with Arrow"

# Install conda and arrow
# RUN cd /tmp \
#   && curl -sSL "https://repo.anaconda.com/miniconda/Miniconda${py_version}-latest-Linux-x86_64.sh" -o /tmp/miniconda.sh \
#   && bash /tmp/miniconda.sh -p /miniconda -b \
#   && rm -rf /tmp/miniconda.sh \
#   && export PATH="/miniconda/bin:${PATH}" \
#   && conda update -y conda \
#   && conda --version \
#   && conda install -y -c pytorch \
#         'pytorch=1.1.0' \
#         'torchvision=0.2.2' \
#         'pillow=6.0.0' \
#         'cudatoolkit=10.0.130' \
#   && conda install -y -c conda-forge \
#         'pyarrow=0.13.0' \
#         'arrow=0.13.1' \
#         'python-snappy=0.5.4' \
#         'pillow=6.0.0' \
#         'retrying=1.3.3' \
#         'six=1.12.0' \
#   && conda clean --all --yes \
#   && cd /tmp \
#   && nvcc --version \
#   && _apex_commit="f2b3a62c8941027253b2decba96ba099f611387e" \
#   && curl -L -O "https://github.com/NVIDIA/apex/archive/${_apex_commit}.zip" \
#   && unzip -x "${_apex_commit}.zip" \
#   && cd "apex-${_apex_commit}" \
#   && pip install -v \
#         --no-cache-dir \
#         --global-option="--cpp_ext" \
#         --global-option="--cuda_ext" . \
#   && cd /tmp \
#   && rm -rf apex* \
#   && pip install --no-cache-dir \
#         'torch==1.1.0' \
#         'torchvision==0.2.2' \
#         'Pillow==6.0.0' \
#         'retrying==1.3.3' \
#         'six==1.12.0' \
#         'fastai==1.0.52' \
#         'opencv-python>=4.0,<4.1' \
#   && echo "Conda: Check that everything is still there" \
#   && which python \
#   && which pip \
#   # TODO: Fix links for Miniconda if import pyarrow fails
#   # && ln -s -f /usr/bin/python3.7 /usr/bin/python \
#   # && ln -s -f /usr/local/bin/pip /usr/bin/pip \
#   && python --version \
#   && python --version 2>&1 | grep "3\.7\.3" \
#   && pip --version \
#   && pip --version 2>&1 | grep "python 3\.7" \
#   && nvcc --version \
#   && python -c 'import pyarrow' \
#   && python -c 'import torch' \
#   && echo "Done with Conda"
# ENV PATH="/miniconda/bin:${PATH}"

RUN cd /tmp \
  && echo "Final: Check that everything is still there" \
  && python --version \
  && python --version 2>&1 | grep "3\.7\.3" \
  && pip --version \
  && pip --version 2>&1 | grep "python 3\.7" \
  && nvcc --version \
  && pip show 'pyarrow' \
  && pip show 'torch' \
  && pip show 'apex' \
  && python -c 'import pyarrow' \
  && python -c 'import torch' \
  && python -c 'import apex' \
  && echo "Done with Final"
