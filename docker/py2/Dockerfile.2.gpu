# laptop time: 40min
ARG CUDA_BASE_VER="10.1"
ARG CUDA_BASE_VER_NO_DOTS="101"
ARG LINUX_VERSION="ubuntu16.04"
FROM nvidia/cuda:${CUDA_BASE_VER}-cudnn7-devel-${LINUX_VERSION}

# Not using nvcr.io as it's a private registry and requires auth
# cudnn 7.5.0 - CUDA 10.1.105
# torch 1.1.0a0+9eb0f43
# FROM nvcr.io/nvidia/pytorch:19.04-py3

# Ensure ARGs before `FROM` stay:
ARG CUDA_BASE_VER
ARG CUDA_BASE_VER_NO_DOTS
ARG LINUX_VERSION

LABEL com.amazonaws.sagemaker.capabilities.accept-bind-to-port=true

RUN nvcc --version \
  && cat /usr/include/x86_64-linux-gnu/cudnn_v*.h | grep CUDNN_MAJOR -A 2 \
  && cat /usr/local/cuda/version.txt

# No interactive frontend during docker build
ENV DEBIAN_FRONTEND=noninteractive \
    DEBCONF_NONINTERACTIVE_SEEN=true

# Locale and encoding settings
ENV LANG_WHICH=en \
    LANG_WHERE=US \
    ENCODING=UTF-8
ENV LANGUAGE ${LANG_WHICH}_${LANG_WHERE}.${ENCODING}
ENV LANG="${LANGUAGE}" \
    LC_ALL="${LANGUAGE}"

# Python won’t try to write .pyc or .pyo files on the import of source modules
# Force stdin, stdout and stderr to be totally unbuffered. Good for logging
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONIOENCODING="${ENCODING}"

RUN apt -qqy update \
  && apt -qqy --no-install-recommends install \
    language-pack-en \
    tzdata \
    locales \
  && locale-gen ${LANGUAGE} \
  && dpkg-reconfigure --frontend noninteractive locales \
  && apt -qyy autoremove \
  && apt -qyy clean

# Timezone settings
ENV TZ="Europe/Berlin"
RUN echo "Setting time zone to '${TZ}'" \
  && echo "${TZ}" > /etc/timezone \
  && dpkg-reconfigure --frontend noninteractive tzdata

ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/cuda/lib:/usr/local/lib" \
    CPLUS_INCLUDE_PATH="/usr/local/cuda/include" \
    CMAKE_VER="3.14.5"

# Install python and nginx
# Compile PyTorch from sources. Compiling notes:
#   Found CUDA with FP16 support, compiling with torch.cuda.HalfTensor
#     good
#   Found a library with BLAS API (generic).
#     generic means it wasn't compiled for a specific CPU
#   Found a library with LAPACK API (generic)
#     generic means it wasn't compiled for a specific CPU
#   MIOpen not found. Compiling without MIOpen support
#     MIOpen is AMD’s library for high performance ML primitives
#   ROCm enabled platform
# TODO: Pin exact gcc-${CC_VERSION} and g++-${CXX_VERSION}
#   https://github.com/rapidsai/build/blob/branch-0.8/generatedDockerfiles/Dockerfile.ubuntu-devel#L63
RUN cd /tmp \
 && apt-get update && apt-get install -y --no-install-recommends software-properties-common \
 && add-apt-repository ppa:deadsnakes/ppa -y \
 && apt-get update && apt-get install -y --no-install-recommends \
        'build-essential' \
        'apt-transport-https' \
        'gnupg' \
        'lsb-release' \
        'curl' \
        'wget' \
        'unzip' \
        'jq' \
        'libsm6' \
        'libxext6' \
        'libxrender-dev' \
        'nginx' \
        'git' \
        'cmake' \
        'libreadline-dev' \
        'libblas-dev' \
        'liblapack-dev' \
  && apt -qyy remove \
        'cmake' \
  && apt -qqy autoremove \
  && cd /tmp \
  && wget -nv "https://github.com/Kitware/CMake/releases/download/v${CMAKE_VER}/cmake-${CMAKE_VER}.tar.gz" \
  && tar -zxf "cmake-${CMAKE_VER}.tar.gz" \
  && cd "cmake-${CMAKE_VER}" \
  && ./configure \
  && make \
  && make install \
  && cd /tmp \
  && rm -rf /tmp/cmake* \
  && cmake --version \
  && cmake --version 2>&1 | grep "${CMAKE_VER}" \
  && apt -qyy remove \
        'python3.5' \
        'python3.5-minimal' \
        'libpython3.5-minimal' \
        'libpython3.5-stdlib' \
  && echo "Done with CMake stage"

# Compile newer OpenBlas from source
RUN cd /tmp \
  && cd /tmp \
  && _blas_commit="26411acd565051b860773b1e3b4f20ad6882872b" \
  && git clone "https://github.com/xianyi/OpenBLAS" \
  && cd OpenBLAS \
  && git checkout "${_blas_commit}" -b local_build \
  && git submodule update --init --recursive \
  && make NO_AFFINITY=1 USE_OPENMP=1 \
  && make install \
  && cd /tmp \
  && rm -rf /tmp/Open* \
  # && apt -qyy install --no-install-recommends \
  #       'python3.7-dev' \
  && apt -qqy autoremove \
  && ln -s -f /usr/bin/python3.7 /usr/bin/python \
  && python --version \
  && python --version 2>&1 | grep "2\.7\.16" \
  && nvcc --version \
  && curl -O "https://bootstrap.pypa.io/get-pip.py" \
  && python get-pip.py \
  && rm get-pip.py \
  && ln -s -f /usr/local/bin/pip /usr/bin/pip \
  && ls -lah --color='always' /usr/bin/pip* \
  && pip --version \
  && pip --version 2>&1 | grep "python 2\.7" \
  && pip install --no-cache-dir \
        'torch==1.1.0' \
        'torchvision==0.3.0' \
        'Pillow==6.0.0' \
        'retrying==1.3.3' \
        'six==1.12.0' \
        'fastai==1.0.52' \
        'opencv-python>=4.0,<4.1' \
  && pip install --no-cache-dir \
        'pyarrow==0.13.0' \
        'python-snappy=0.5.4' \
  && python -c 'import torch' \
  && python -c 'import pyarrow' \
  && echo "Done installing arrow"
